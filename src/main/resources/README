README
------

This application/proof of concept is based on a programming test (not a design contest) I did for a job interview in Tokyo, Japan. 

For copyright and licence information please refer to the bottom of this readme file.

I developed this on a Mac Book w/ Mac OS X 10.6 in NetBeans 7 between 2011-11-14 and 2011-11-20. 
I also used the Google Chrome browser (version 15.*) to test this application.

This application uses serveral source files from the original Google samples for google-api-java-client. 
For more details about the samples please see http://code.google.com/p/google-api-java-client

The original sample code and sample classes I use are in the package de.kurashigegollub.com.google.calender.
The files I modified are as follows:

EDITED:
- CalendarUrl.java
- Entry.java

ADDED:
- Author.java

The rest of my own code is in the package de.kurashigegollub.dev.*.

Other technologies used:
    - Java EE
    - JavaScript
    - CSS
    - HTML
    - git
    - Maven 3 (bundled w/ NetBeans 7)
    - Tomcat 6.0.33
    - Google Client Library for Java (see pom.xml for details)
    - Apache libraries such as commons-io (see pom.xml for details)
    - jQuery 1.7

TODOs/ideas:
------

- refactor exception and error handling to be more streamlined
- refactor application flow
    + if only one calendar is present, the user should see all the entries immediately and
      he shouldn't be forced to first click on the calendar
    + ...

- add a html template system to replace the direct HTML output in the Java classes (maybe http://code.google.com/closure/templates/)
  OR
  use JSP/JSF instead
- add unit tests
- add proper JDoc annotations and documentation
- prettify HTML & CSS


Task description is as follows:
-------------------------------

++++++

goal: create a web application to view a gmail user's calendar data,
with the option to forward the calendar data in a mail message

process: application operates as per the following
1 User opens the test application page and on loading, the user's
calender data for the next 2 weeks is retrieved and displayed.

2 Authenticate the user via any Google authentication method, OAuth,
AuthSub, ClientLogin, etc.
(http://code.google.com/apis/accounts/docs/GettingStarted.html)

3 User the Google Calendar API to retrieve user calendar data.
(http://code.google.com/apis/calendar/data/2.0/developers_guide.html)

4 The user can enter 1 or more mail address and click a button to open
a gmail compose window prepopulated with the calendar data.

notes:
- Please create your own gmail account for development.
- The test application should be developed in Java1.6 and run on Tomcat 6.0.

++++++

Comments on workflow, general implementation and other topics
-------------------------------------------------------------




COPYRIGHT & LICENCE INFORMATION
-------------------------------

The copyright for 3rd party code (eg Google) is clearly stated in every 3rd party file.

All other code is copyright (C) 2011 by Daniel Kurashige-Gollub, daniel@kurashige-gollub.de

The licence for my part of the code is "Apache License, Version 2.0", and it is the same
as the Google example code, which I use as stated above.

/**
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

Copyright (C) 2011 Daniel Kurashige-Gollub, daniel@kurashige-gollub.de